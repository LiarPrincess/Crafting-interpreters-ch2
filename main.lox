print "> Should print: false";
if (true and false) {
  var a = "global a";
  var b = "global b";
  var c = "global c";
  {
    var a = "outer a";
    var b = "outer b";
    {
      var a = "inner a";
      print a;
      print b;
      print c;
    }
    print a;
    print b;
    print c;
    }
  print a;
  print b;
  print c;
}
else {
  print "false";
}

print "";
print "> Should print: one, true, 3, -3";
print "one";
print true; // comment
print 2 + 1;
print (1+(2-4))*3;

print "";
print "> Should print: 5";
var a = 1;
var b = 2;
b = 4;
print a + b;

print "";
print "> Should print: 1";
var a = 1;
{
  //var a = a + 2;
  print a;
}

print "";
print "> While loop - should print: loop -> 3, 2, 1";
var loopControl = 3;
while (loopControl > 0) {
  print "loop: " + loopControl;
  loopControl = loopControl - 1;
}

print "";
print "> Time - should print double";
print clock();

print "";
print "> Function - should print: 'Inside function 5foo'";
fun testFun(param1, param2) {
  print "Inside function: " + param1 + param2;
}
testFun(5, "foo");

print "";
print "> Fibonacci rec - should print: 0, 1, 1, 2, 3, 5, 8";
fun fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 2) + fibonacci(n - 1);
}

for (var i = 0; i < 7; i = i + 1) {
  print fibonacci(i);
}

print "";
print "> Counter closure - should print: 1, 2";
fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }
  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

print "";
print "> Testing scopes - uncomment to get error";
var a = "outer";
{
  // var a = a;
}

print "> Testing double declaration - uncomment to get error";
fun bad() {
  var a = "first";
  // var a = "second";
}

print "> Testing top-level return - uncomment to get error";
// return 5;

print "> Testing unused variable";
{
  var unusedVariable = "5";
}

print "";
print "> Class properites - should print: eggs";
class Breakfast {
  cook() {
    print "Eggs a-fryin'!";
  }

  serve(who) {
    print "Enjoy your breakfast, " + who + ".";
  }
}

print Breakfast;

var b = Breakfast();
b.name = "eggs";
print b;
print b.name;

print "";
print "> Class methods - should print: Crunch crunch crunch!";
class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

var bacon = Bacon();
bacon.eat(); // Prints "Crunch crunch crunch!".

print "";
print "> Class this - should print: Instance";

class Egotist {
  speak() {
    print this;
  }
}

var method = Egotist().speak;
method();

print "";
print "> Testing 'this' outside of class - uncomment to get error";
// var a = this;

print "";
print "> Class init - should print: value-5";

class Egotist {

  init(value) {
    this.value = value;
  }

  speak() {
    print this.value;
  }
}

Egotist("value-5").speak();
